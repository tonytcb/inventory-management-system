// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/tonytcb/inventory-management-system/internal/domain"
)

// FXRateProvider is an autogenerated mock type for the FXRateProvider type
type FXRateProvider struct {
	mock.Mock
}

type FXRateProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *FXRateProvider) EXPECT() *FXRateProvider_Expecter {
	return &FXRateProvider_Expecter{mock: &_m.Mock}
}

// GetLatestRate provides a mock function with given fields: ctx, from, to
func (_m *FXRateProvider) GetLatestRate(ctx context.Context, from domain.Currency, to domain.Currency) (*domain.FXRate, error) {
	ret := _m.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestRate")
	}

	var r0 *domain.FXRate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Currency, domain.Currency) (*domain.FXRate, error)); ok {
		return rf(ctx, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Currency, domain.Currency) *domain.FXRate); ok {
		r0 = rf(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.FXRate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Currency, domain.Currency) error); ok {
		r1 = rf(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FXRateProvider_GetLatestRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestRate'
type FXRateProvider_GetLatestRate_Call struct {
	*mock.Call
}

// GetLatestRate is a helper method to define mock.On call
//   - ctx context.Context
//   - from domain.Currency
//   - to domain.Currency
func (_e *FXRateProvider_Expecter) GetLatestRate(ctx interface{}, from interface{}, to interface{}) *FXRateProvider_GetLatestRate_Call {
	return &FXRateProvider_GetLatestRate_Call{Call: _e.mock.On("GetLatestRate", ctx, from, to)}
}

func (_c *FXRateProvider_GetLatestRate_Call) Run(run func(ctx context.Context, from domain.Currency, to domain.Currency)) *FXRateProvider_GetLatestRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Currency), args[2].(domain.Currency))
	})
	return _c
}

func (_c *FXRateProvider_GetLatestRate_Call) Return(_a0 *domain.FXRate, _a1 error) *FXRateProvider_GetLatestRate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FXRateProvider_GetLatestRate_Call) RunAndReturn(run func(context.Context, domain.Currency, domain.Currency) (*domain.FXRate, error)) *FXRateProvider_GetLatestRate_Call {
	_c.Call.Return(run)
	return _c
}

// NewFXRateProvider creates a new instance of FXRateProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFXRateProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *FXRateProvider {
	mock := &FXRateProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
