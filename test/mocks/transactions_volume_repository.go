// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	domain "github.com/tonytcb/inventory-management-system/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// TransactionsVolumeRepository is an autogenerated mock type for the TransactionsVolumeRepository type
type TransactionsVolumeRepository struct {
	mock.Mock
}

type TransactionsVolumeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionsVolumeRepository) EXPECT() *TransactionsVolumeRepository_Expecter {
	return &TransactionsVolumeRepository_Expecter{mock: &_m.Mock}
}

// GetVolume provides a mock function with given fields: ctx, fromCurrency, toCurrency
func (_m *TransactionsVolumeRepository) GetVolume(ctx context.Context, fromCurrency domain.Currency, toCurrency domain.Currency) (decimal.Decimal, error) {
	ret := _m.Called(ctx, fromCurrency, toCurrency)

	if len(ret) == 0 {
		panic("no return value specified for GetVolume")
	}

	var r0 decimal.Decimal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Currency, domain.Currency) (decimal.Decimal, error)); ok {
		return rf(ctx, fromCurrency, toCurrency)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Currency, domain.Currency) decimal.Decimal); ok {
		r0 = rf(ctx, fromCurrency, toCurrency)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Currency, domain.Currency) error); ok {
		r1 = rf(ctx, fromCurrency, toCurrency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionsVolumeRepository_GetVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVolume'
type TransactionsVolumeRepository_GetVolume_Call struct {
	*mock.Call
}

// GetVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - fromCurrency domain.Currency
//   - toCurrency domain.Currency
func (_e *TransactionsVolumeRepository_Expecter) GetVolume(ctx interface{}, fromCurrency interface{}, toCurrency interface{}) *TransactionsVolumeRepository_GetVolume_Call {
	return &TransactionsVolumeRepository_GetVolume_Call{Call: _e.mock.On("GetVolume", ctx, fromCurrency, toCurrency)}
}

func (_c *TransactionsVolumeRepository_GetVolume_Call) Run(run func(ctx context.Context, fromCurrency domain.Currency, toCurrency domain.Currency)) *TransactionsVolumeRepository_GetVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Currency), args[2].(domain.Currency))
	})
	return _c
}

func (_c *TransactionsVolumeRepository_GetVolume_Call) Return(_a0 decimal.Decimal, _a1 error) *TransactionsVolumeRepository_GetVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionsVolumeRepository_GetVolume_Call) RunAndReturn(run func(context.Context, domain.Currency, domain.Currency) (decimal.Decimal, error)) *TransactionsVolumeRepository_GetVolume_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, fromCurrency, toCurrency, amount
func (_m *TransactionsVolumeRepository) Save(ctx context.Context, fromCurrency domain.Currency, toCurrency domain.Currency, amount decimal.Decimal) error {
	ret := _m.Called(ctx, fromCurrency, toCurrency, amount)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Currency, domain.Currency, decimal.Decimal) error); ok {
		r0 = rf(ctx, fromCurrency, toCurrency, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionsVolumeRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type TransactionsVolumeRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - fromCurrency domain.Currency
//   - toCurrency domain.Currency
//   - amount decimal.Decimal
func (_e *TransactionsVolumeRepository_Expecter) Save(ctx interface{}, fromCurrency interface{}, toCurrency interface{}, amount interface{}) *TransactionsVolumeRepository_Save_Call {
	return &TransactionsVolumeRepository_Save_Call{Call: _e.mock.On("Save", ctx, fromCurrency, toCurrency, amount)}
}

func (_c *TransactionsVolumeRepository_Save_Call) Run(run func(ctx context.Context, fromCurrency domain.Currency, toCurrency domain.Currency, amount decimal.Decimal)) *TransactionsVolumeRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Currency), args[2].(domain.Currency), args[3].(decimal.Decimal))
	})
	return _c
}

func (_c *TransactionsVolumeRepository_Save_Call) Return(_a0 error) *TransactionsVolumeRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionsVolumeRepository_Save_Call) RunAndReturn(run func(context.Context, domain.Currency, domain.Currency, decimal.Decimal) error) *TransactionsVolumeRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionsVolumeRepository creates a new instance of TransactionsVolumeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionsVolumeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionsVolumeRepository {
	mock := &TransactionsVolumeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
