// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/tonytcb/inventory-management-system/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// FxRateUpdater is an autogenerated mock type for the FxRateUpdater type
type FxRateUpdater struct {
	mock.Mock
}

type FxRateUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *FxRateUpdater) EXPECT() *FxRateUpdater_Expecter {
	return &FxRateUpdater_Expecter{mock: &_m.Mock}
}

// Update provides a mock function with given fields: ctx, rate
func (_m *FxRateUpdater) Update(ctx context.Context, rate *domain.FXRate) error {
	ret := _m.Called(ctx, rate)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FXRate) error); ok {
		r0 = rf(ctx, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FxRateUpdater_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type FxRateUpdater_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - rate *domain.FXRate
func (_e *FxRateUpdater_Expecter) Update(ctx interface{}, rate interface{}) *FxRateUpdater_Update_Call {
	return &FxRateUpdater_Update_Call{Call: _e.mock.On("Update", ctx, rate)}
}

func (_c *FxRateUpdater_Update_Call) Run(run func(ctx context.Context, rate *domain.FXRate)) *FxRateUpdater_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.FXRate))
	})
	return _c
}

func (_c *FxRateUpdater_Update_Call) Return(_a0 error) *FxRateUpdater_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FxRateUpdater_Update_Call) RunAndReturn(run func(context.Context, *domain.FXRate) error) *FxRateUpdater_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewFxRateUpdater creates a new instance of FxRateUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFxRateUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *FxRateUpdater {
	mock := &FxRateUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
