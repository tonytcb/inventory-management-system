// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	domain "github.com/tonytcb/inventory-management-system/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// TransferCreator is an autogenerated mock type for the TransferCreator type
type TransferCreator struct {
	mock.Mock
}

type TransferCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *TransferCreator) EXPECT() *TransferCreator_Expecter {
	return &TransferCreator_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, transfer, margin
func (_m *TransferCreator) Create(ctx context.Context, transfer *domain.Transfer, margin decimal.Decimal) (*domain.Transfer, error) {
	ret := _m.Called(ctx, transfer, margin)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Transfer, decimal.Decimal) (*domain.Transfer, error)); ok {
		return rf(ctx, transfer, margin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Transfer, decimal.Decimal) *domain.Transfer); ok {
		r0 = rf(ctx, transfer, margin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Transfer, decimal.Decimal) error); ok {
		r1 = rf(ctx, transfer, margin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferCreator_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TransferCreator_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - transfer *domain.Transfer
//   - margin decimal.Decimal
func (_e *TransferCreator_Expecter) Create(ctx interface{}, transfer interface{}, margin interface{}) *TransferCreator_Create_Call {
	return &TransferCreator_Create_Call{Call: _e.mock.On("Create", ctx, transfer, margin)}
}

func (_c *TransferCreator_Create_Call) Run(run func(ctx context.Context, transfer *domain.Transfer, margin decimal.Decimal)) *TransferCreator_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Transfer), args[2].(decimal.Decimal))
	})
	return _c
}

func (_c *TransferCreator_Create_Call) Return(_a0 *domain.Transfer, _a1 error) *TransferCreator_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransferCreator_Create_Call) RunAndReturn(run func(context.Context, *domain.Transfer, decimal.Decimal) (*domain.Transfer, error)) *TransferCreator_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransferCreator creates a new instance of TransferCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransferCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransferCreator {
	mock := &TransferCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
